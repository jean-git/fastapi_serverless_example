service: fastapi-serverless-example

package:
  individually: true

provider:
  name: aws
  runtime: python3.8
  region: us-east-1
  stage: ${opt:stage, "dev"}

  environment:
    STAGE: ${self:provider.stage}

plugins:
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-offline
  - serverless-dynamodb-local
custom:
  pythonRequirements:
    dockerizePip: true
    layer:
      name: my-fastapi-serverless-app-layer
      description: My fastapi serverless app layer
      compatibleRuntimes:
        - python3.8
  prune:
    automatic: true
    includeLayers: true
    number: 10

  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
      stages:
        - dev
      start:
        port: 8000
        inMemory: true
        heapInitial: 200m
        heapMax: 1g
        migrate: true
        seed: true
        convertEmptyValues: true
      # Uncomment only if you already have a DynamoDB running locally
      # noStart: true
      
  stage: ${opt:stage, self:provider.stage}

functions:
  app:
    package:
      include:
        - "main.py"
        - "app"
      exclude:
        - "requirements.txt"
        - "package.json"
        - "package-lock.json"
        - ".serverless/**"
        - ".virtualenv/**"
        - "node_modules/**"
        - "venv/**"

    handler: app.main.handler
    environment:
      STAGE: ${self:provider.stage}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - http:
          method: any
          path: /{proxy+}

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1          